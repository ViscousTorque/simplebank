# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: ci-test

on:
  push:
    branches: [ "udemy" ]
  pull_request:
    branches: [ "udemy" ]

jobs:

  tests:
    name: Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: adminSecret
          POSTGRES_DB: simple_bank
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: List Running Docker Containers
      run: docker ps -a

    - name: Add Postgres to /etc/hosts
      run: echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts

    - name: Print PostgreSQL Logs
      run: docker logs $(docker ps -q --filter ancestor=postgres:12)

    - name: Install Migrate Tool
      run: |
        sudo curl -L https://github.com/golang-migrate/migrate/releases/download/v4.15.2/migrate.linux-amd64.tar.gz -o migrate.tar.gz
        sudo tar -xvf migrate.tar.gz -C /usr/local/bin
        migrate -version

    - name: Test Hostname Resolution
      run: |
        nslookup postgres || echo "Failed to resolve hostname"

    - name: Wait for PostgreSQL
      run: |
        timeout=60  # Maximum time to wait in seconds
        elapsed=0
        while ! pg_isready -h postgres -p 5432; do
          if [ $elapsed -ge $timeout ]; then
            echo "PostgreSQL did not become ready in $timeout seconds.";
            exit 1;
          fi
          echo "Waiting for PostgreSQL...";
          sleep 5;
          elapsed=$((elapsed + 5));
        done
        echo "PostgreSQL is ready!";

    - name: Run Migration
      run: make migrateup

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Create app.local.env file**
      run: |
        echo EMAIL_SENDER_NAME=${{ secrets.EMAIL_SENDER_NAME }} >> ./app.local.env
        echo EMAIL_SENDER_ADDRESS=${{ secrets.EMAIL_SENDER_ADDRESS }} >> ./app.local.env
        echo EMAIL_SENDER_PASSWORD=${{ secrets.EMAIL_SENDER_PASSWORD }} >> ./app.local.env
        echo EMAIL_TEST_RECIPIENT=${{ secrets.EMAIL_TEST_RECIPIENT }} >> ./app.local.env

    - name: Run Make Test
      run: make test